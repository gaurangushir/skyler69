%Q1)
% a = 3
Fs = 720;
% Finding order and Natural frequency
[N,wn] = buttord(10*2/Fs,20*2/Fs,3,40);
% finding the numerator and denominator coefficients of transfer function
[B,A] = butter(N,wn);
% finding the TF
SYS = tf(B,A,1/Fs);
% plotting poles and zeroes
figure();
pzmap(SYS);

% plotting bode
figure();
h = bodeplot(SYS);
setoptions(h,'FreqUnits','Hz');
title('Bode of Butterworth');

1

% Q2: Filtering ECG Data
% Sampling frequency
Fs = 720;
% Finding the order and natural frequency for the Butterworth filter
[N, wn] = buttord(10 * 2 / Fs, 20 * 2 / Fs, 3, 40);
% Finding the numerator and denominator coefficients of the transfer function
[B, A] = butter(N, wn);
% Loading ECG data
ECG = load('ECG_Data.txt');
% Filtering ECG data
Y = filter(B, A, ECG);
% Time vector for plotting
dt = 1 / Fs;
n = length(ECG);
T = n / Fs;
t = 0:dt:T-dt;
% Plotting the filtered ECG signal
figure();
plot(t, ECG, 'r', 'DisplayName', 'Original'); % Original signal in red

2

hold on;
plot(t, Y, 'g', 'DisplayName', 'Filtered'); % Filtered signal in green
legend show;
title('Filtering Action on ECG');
xlabel('Time (s)');
ylabel('ECG Signal');
grid on;

% Performing the Discrete Fourier Transform (DFT)
DFTx = fft(ECG);
DFTy = fft(Y);
% Frequency vector for plotting
N = length(DFTx);
k = 0:N-1;
f = Fs / N * k;
% Plotting the DFT
figure();
subplot(2, 1, 1);
plot(f, abs(DFTx));
title('DFT of Original Signal');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
xlim([0, Fs/2]); % Limit to half the sampling frequency
grid on;

3

subplot(2, 1, 2);
plot(f, abs(DFTy));
title('DFT of Filtered Signal');
xlabel('Frequency (Hz)');
ylabel('Magnitude');
xlim([0, Fs/2]); % Limit to half the sampling frequency
grid on;

%Q3
% Clear workspace and command window
clear; clc;
% Importing the WAV file
[y, Fs] = audioread('instru3.wav');
% Check if the audio data is stereo and convert to mono if necessary
if size(y, 2) == 2
y = mean(y, 2); % Convert to mono by averaging the channels
end
% Plotting the spectrogram of the original signal
figure;
spectrogram(y, blackman(500), 250, [], Fs, 'yaxis');
title('Original Instru3');
xlabel('Time (s)');
ylabel('Frequency (Hz)');

4

colorbar;

% Designing the Butterworth filter
passband = [700, 850] * 2 / Fs; % Normalized passband
stopband = [690, 950] * 2 / Fs; % Normalized stopband
% Calculate the filter order and cutoff frequencies
[N, Wn] = buttord(passband, stopband, 10, 15);
[B, A] = butter(N, Wn);
% Filtering the audio signal
Y = filter(B, A, y);
% Writing the filtered audio to a new file
audiowrite('filtered_instru3.wav', Y, Fs);
% Plotting the spectrogram of the filtered signal
figure;
spectrogram(Y, blackman(500), 250, [], Fs, 'yaxis');
title('Filtered Instru3');
xlabel('Time (s)');
ylabel('Frequency (Hz)');
colorbar;

5

%Q4)
% a = 3
Fs = 720;
% designing chebyshev1 filter
[N,wp] = cheb1ord(10*2/Fs,20*2/Fs,3,40);
[B,A] = cheby1(N,0.5,wp);
SYS1 = tf(B,A,1/Fs);
% plotting bode of chebyshev1
figure();
h = bodeplot(SYS1);
setoptions(h,'FreqUnits','Hz');
title('Bode of Chebyshev1');

6

% designing butterworth filter
[N,wn] = buttord(10*2/Fs,20*2/Fs,3,40);
[B,A] = butter(N,wn);
SYS2 = tf(B,A,1/Fs);
% finding impulse and step responses of chebyshev1 and butterworth filters
[Y1,T1] = impulse(SYS1,1);
[Y2,T2] = step(SYS1,1);
[Y3,T3] = impulse(SYS2,1);
[Y4,T4] = step(SYS2,1);
% plotting the impulse and step responses
figure();
plot(T1,Y1,'r',T3,Y3,'g',T2,Y2,'y',T4,Y4,'b');
legend('Impulse Chebyshev1','Impulse Butterworth','Step Chebyshev1','Step Butterworth');
title('Time Responses');
xlabel('Time(s)');
ylabel('y(t)');
