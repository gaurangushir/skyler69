1.take input signal
y=3.*cos(2*pi*50.*t/200)+1.*cos(2*pi*100.*t/200)
2.plot this signal
3. decimate this signal using function decimate
4. interpolate this decimated signal using function interp
5. plot both signals.

%Generate the input sequence for Fs5200Hz, f1550Hz and f25100 Hz
clc;
clear all;
close all;
t=0:1/200:10;
y=3.*cos(2*pi*50.*t/200)+1.*cos(2*pi*100.*t/200);
figure(1)
stem(y);
xlabel(&#39;Times in Seconds&#39;);
ylabel(&#39;Amplitude&#39;);
%Generate the decimated and interpolated signals
figure(2)
stem(decimate(y,20));
xlabel(&#39;Times in Seconds&#39;);
ylabel(&#39;Amplitude&#39;);
figure(3)
stem(interp(decimate(y,20),2));
xlabel(&#39;Times in Seconds&#39;);
ylabel(&#39;Amplitude&#39;);
Output:

Second Program:
clc;
close all;
clear all;
fm = 10;
Fs = 140; % sampling frequency
t = 0:1/Fs:0.5; % time range for the input sequence
x = sin(2*pi*fm*t); % input sinusoidal signal
figure(1)
subplot(4,1,1)
stem(x);
xlabel(&#39;No. of samples&#39;);
ylabel(&#39;Amplitude&#39;);
title(&#39;input discrete sinusoidal sequence&#39;);
M = 2; % factor by which the input sequence is decimated
xd = decimate(x,M);
subplot(4,1,2)
stem(xd)
xlabel(&#39;No. of samples&#39;);
ylabel(&#39;Amplitude&#39;);
title(&#39;Decimated Sinusoidal Sequence&#39;);
L = 2; % factor by which the input sequence is interpolated
xI = interp(x,L);
subplot(4,1,3);
stem(xI);

xlabel(&#39;No. of samples&#39;);
ylabel(&#39;Amplitude&#39;);
title(&#39;Interpolated Sinuoidal Sequence&#39;)
L = 2; % coefficient by which the singal is interpolated
xI = interp(xd,L);
subplot(4,1,4)
stem(xI);
xlabel(&#39;No. of samples&#39;);
ylabel(&#39;Amplitude&#39;);
title(&#39;Original Signal Obtained After Interpolating the Decimated Signal&#39;);
Output:
