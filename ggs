% number of points in windows
N = 125;
% plotting different windows
figure();
subplot(3,1,1);
plot(rectwin(N));
title('Rectangular Window');
xlabel('samples');
ylabel('y(n)');
subplot(3,1,2);
plot(hamming(N));
title('Hamming Window');
xlabel('samples');
ylabel('y(n)');
subplot(3,1,3);
plot(hanning(N));
title('Hanning Window');
xlabel('samples');
ylabel('y(n)');

%q2)
% a = 3, hanning window
% defining the lengths for different hanning winows
N1 = 100;

1

N2 = 200;
N3 = 300;
% getting the hanning windows
x1 = hanning(N1);
x2 = hanning(N2);
x3 = hanning(N3);
N = 2048;
k = 0:N-1;
% taking the 1024 point DFTs of different windows
DFT1 = fft(x1,N);
DFT2 = fft(x2,N);
DFT3 = fft(x3,N);
% plotting the frequency spectrums
figure();
plot(k/N,abs(DFT1)/N1,'r');
hold on;
plot(k/N,abs(DFT2)/N2,'b');
hold on;
plot(k/N,abs(DFT3)/N3,'g');
hold on;
legend('100 pts','200 pts','300 pts');
title('Frequency Spectrums');
xlabel('Normalized f');
ylabel('Normalized abs(DFT)');

%Q3)

2

% a = 3, rectangular and hanning windows
% M = 21, so N = 20
% defining cutoff frequency
Wc = 1/(1+3);
N = 20;
% desinging the FIR filters using different windows.
B1 = fir1(N,Wc,rectwin(21));
B2 = fir1(N,Wc,hanning(21));
% plotting the Impulse response of filters
figure();
stem(0:(size(B1,2)-1),B1,'r');
hold on;
stem(0:(size(B2,2)-1),B2,'g');
legend('Rectangular','Hanning');
title('Impulse Response');
xlabel('samples');
ylabel('h(n)');

% ploting the bode
figure();
freqz(B1);
title('Rectangular window');

3

figure();
freqz(B2);
title('Hanning window');

4

% Q4
% Q4
% Loading the audio file
[x, Fs] = audioread('instru3.mp3');
% If stereo, convert to mono by averaging channels
if size(x, 2) == 2
x = mean(x, 2); % Averaging both channels to create a mono signal
end
% Plotting the spectrogram of original audio
figure();
spectrogram(x, blackman(500), 10, [], Fs);
title('Original Audio');

5

% Setting the cut-off frequencies for band-pass filter
f1 = 695;
f2 = 900;
% Designing the filter
N = 300;
B = fir1(N, [f1*2/Fs, f2*2/Fs], 'bandpass', blackman(N+1));
A = 1;
% Filtering the signal
y = filter(B, A, x);
% Writing the filtered audio to a new file in .wav format
audiowrite('filtered_instru3.wav', y, Fs);
% Plotting the spectrogram of processed audio
figure();
spectrogram(y, blackman(500), 10, [], Fs);
title('Filtered Audio');
